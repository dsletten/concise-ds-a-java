package ch07;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;

import static org.assertj.core.api.Assertions.assertThat;

public class TestBalanced {
//    private static Predicate<String> p;
//
//    @ParameterizedTest
//    @CsvSource({
//            "",
//            "[]",
//            "[[]]",
//            "[[[]]]",
//            "[][]",
//            "[[][]]",
//            "[[]][[]]",
//            "[[[][]][]]",
//            "[][][[][[]]]",
})
//
//    private static void testBalanced(String pattern) {
//        assertThat(p.test(pattern)).isTrue();
//    }

    private static List<String> BALANCED = Arrays.asList("",
            "[]",
            "[[]]",
            "[[[]]]",
            "[][]",
            "[[][]]",
            "[[]][[]]",
            "[[[][]][]]",
            "[][][[][[]]]",


    private static List<String> UNBALANCED = Arrays.asList("[", "]", "[[]", "[]]", "[]]fads", "[]fads", "[a[]]", "[[]a]", "[[a]]", "[[]]a", "[[]a[]]", "[[[]][]][]]",




    @Test
    public void testRecursiveIsBalanced() {
        testBalanced(Balance::recursiveIsBalanced);
        testUnbalanced(Balance::recursiveIsBalanced);
    }

    @Test
    public void testCheckBalancedIterativeStringEnumerator() {
        testBalanced(Balance::checkBalancedIterativeStringEnumerator);
        testUnbalanced(Balance::checkBalancedIterativeStringEnumerator);
    }

    @Test
    public void testCheckBalancedIterativeString() {
        testBalanced(Balance::checkBalancedIterativeString);
        testUnbalanced(Balance::checkBalancedIterativeString);
    }

    @Test
    public void testCheckBalancedStackStringEnumerator() {
        testBalanced(Balance::checkBalancedStackStringEnumerator);
        testUnbalanced(Balance::checkBalancedStackStringEnumerator);
    }

    @Test
    public void testCheckBalancedStackString() {
        testBalanced(Balance::checkBalancedStackString);
        testUnbalanced(Balance::checkBalancedStackString);
    }

    private void testBalanced(Predicate<String> test) {
        for (String pattern : BALANCED) {
            assertThat(test.test(pattern)).isTrue();
        }
    }

    private void testUnbalanced(Predicate<String> test) {
        for (String pattern : UNBALANCED) {
            assertThat(test.test(pattern)).isFalse();
        }
    }
}
